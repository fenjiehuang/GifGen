using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace GifGen
{
    public partial class MainForm : Form
    {
        string in_video_path = "";
        string out_gif_path = "";
        //字幕模板
        const string subtitle_template = @"
[Script Info]
; Script generated by FFmpeg/Lavc58.17.100
ScriptType: v4.00+
PlayResX: 384
PlayResY: 288

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,{0},&H{1},&Hffffff,&H0,&H0,0,0,0,0,100,100,0,0,1,1,0,2,10,10,10,0

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text";

        string default_subtitle_file_name = "subtitle.ass";
        string default_palette_file_name = "palette.png";


        string default_font_color = "#FFFFFF";
        string default_resolution = "320:-1";

        public MainForm()
        {
            InitializeComponent();
        }

        private void button_in_video_Click(object sender, EventArgs e)
        {
            if (openFileDialog_in_video.ShowDialog() == DialogResult.OK)
            {

                in_video_path = openFileDialog_in_video.FileName;
                Console.WriteLine(in_video_path);
                textBox_in_video_path.Text = in_video_path;
            }
        }

        private void button_gen_Click(object sender, EventArgs e)
        {
            string subtitle_args = "";
            string subtitle_content = string.Format(subtitle_template, numericUpDown_font_size.Value, default_font_color);
            string resolution = textBox_resolution.Text;
            if (checkBox_subtitle.Checked)
            {
                for (int i = 0; i < dataGridView_subtitle.Rows.Count; i++)
                {
                    subtitle_content += genDialogue(dataGridView_subtitle.Rows[i].Cells[0].Value.ToString(), dataGridView_subtitle.Rows[i].Cells[1].Value.ToString(), dataGridView_subtitle.Rows[i].Cells[2].Value.ToString());
                }
                writeSubtitle(subtitle_content);
                subtitle_args = "ass=" + default_subtitle_file_name + ",";
            }

            //生成palette
            string filters_args = string.Format("{0}fps={1},scale={2}:flags=lanczos", subtitle_args, numericUpDown_framerate.Value, resolution);
            string gen_palette_args = string.Format(" -v warning -ss {0} -t {1} -i {2} -vf \"{3},palettegen=stats_mode=full\" -y {4}", dateTimePicker_start_time.Text, numericUpDown_duration.Value, in_video_path, filters_args, default_palette_file_name);
            runCMD("ffmpeg.exe", gen_palette_args);

            string start_time = dateTimePicker_start_time.Text;
            string duration = numericUpDown_duration.Value.ToString();

            if (checkBox_subtitle.Checked)
            {

                //如果要添加字幕，则需要生成临时无字幕的gif文件作为最终合成字幕的gif的输入
                string tmp_gif_file = "tmp.gif";

                string tmp_filters_args = string.Format("fps={0},scale={1}:flags=lanczos", numericUpDown_framerate.Value, "320:-1");
                string tmp_argvs = string.Format("-v warning -i {0} -i {1} -ss {2} -t {3} -lavfi \"{4} [x]; [x][1:v] paletteuse=dither=sierra2_4a\" -y {5}", in_video_path, default_palette_file_name, start_time, duration, tmp_filters_args, tmp_gif_file);
                runCMD("ffmpeg.exe", tmp_argvs);

                //为tmp.gif文件添加字幕
                string tmp_subtitle_args = "ass=" + default_subtitle_file_name;
                tmp_argvs = string.Format("-v warning -i {0} -i {1} -lavfi \"{2}\" -y {3}", tmp_gif_file, default_palette_file_name, tmp_subtitle_args, out_gif_path);

                if (runCMD("ffmpeg.exe", tmp_argvs) == 0)
                {
                    MessageBox.Show("生成成功！");
                }
                else
                {
                    MessageBox.Show("生成失败！", "温馨提示", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
            else
            {
                string argvs = string.Format("-v warning -i {0} -i {1} -ss {2} -t {3} -lavfi \"{4} [x]; [x][1:v] paletteuse=dither=sierra2_4a\" -y {5}", in_video_path, default_palette_file_name, start_time, duration, filters_args, out_gif_path);

                if (runCMD("ffmpeg.exe", argvs) == 0)
                {
                    MessageBox.Show("生成成功！");
                }
                else
                {
                    MessageBox.Show("生成失败！", "温馨提示", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }

            }
        }

        private void button_save_path_Click(object sender, EventArgs e)
        {
            if (saveFileDialog_out.ShowDialog() == DialogResult.OK)
            {
                out_gif_path = saveFileDialog_out.FileName;
                textBox_save_path.Text = out_gif_path;
            }
        }

        string genDialogue(string start_time, string end_time, string content)
        {
            return string.Format("\nDialogue: 0,{0},{1},Default,,0,0,0,,{2}", start_time, end_time, content);
        }

        private void dataGridView_subtitle_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            if (dataGridView_subtitle.Columns[e.ColumnIndex].HeaderText != Column_content.HeaderText && dataGridView_subtitle.Rows[e.RowIndex].Cells[e.ColumnIndex].Value != null)
            {
                string edit_value = dataGridView_subtitle.Rows[e.RowIndex].Cells[e.ColumnIndex].Value.ToString();
                if (!Regex.Match(edit_value, @"^\d:\d{2}:\d{2}.\d{1,3}$").Success)
                {
                    dataGridView_subtitle.Rows[e.RowIndex].Cells[e.ColumnIndex].Value = "";
                    MessageBox.Show("输入格式有误！", "温馨提示", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
        }

        private void button_add_row_Click(object sender, EventArgs e)
        {
            string[] paras = { "0:00:00.00", "0:00:00.00", "" };
            dataGridView_subtitle.Rows.Add(paras);
        }

        private void checkBox_subtitle_CheckStateChanged(object sender, EventArgs e)
        {
            if (checkBox_subtitle.Checked)
            {
                dataGridView_subtitle.Enabled = true;
                button_add_row.Enabled = true;
            }
            else
            {
                dataGridView_subtitle.Enabled = false;
                button_add_row.Enabled = false;
            }
        }

        /// <summary>
        /// 向默认的subtitle文件写入内容
        /// </summary>
        /// <param name="content"></param>
        void writeSubtitle(string content)
        {
            StreamWriter sw = new StreamWriter(default_subtitle_file_name);
            sw.Write(content);
            sw.Flush();
            sw.Close();
        }

        /// <summary>
        /// 运行命令
        /// </summary>
        /// <param name="executeFile">可执行的文件路径</param>
        /// <param name="argvs">执行命令参数</param>
        /// <returns></returns>
        int runCMD(string executeFile, string argvs)
        {
            ProcessStartInfo startInfo = new ProcessStartInfo(executeFile);
            startInfo.CreateNoWindow = true;
            startInfo.UseShellExecute = false;
            startInfo.RedirectStandardOutput = true;
            startInfo.Arguments = argvs;
            Process p = Process.Start(startInfo);
            p.WaitForExit();
            return p.ExitCode;
        }

        private void button_font_color_Click(object sender, EventArgs e)
        {
            if (colorDialog_font_color.ShowDialog() == DialogResult.OK)
            {
                button_font_color.BackColor = colorDialog_font_color.Color;
                //rbg转为bgr
                int b = colorDialog_font_color.Color.B;
                int g = colorDialog_font_color.Color.G;
                int r = colorDialog_font_color.Color.R;

                default_font_color = ColorTranslator.ToHtml(Color.FromArgb(b,g,r)).Replace("#","");
                
            }

        }

        private void MainForm_Load(object sender, EventArgs e)
        {
            button_font_color.BackColor = ColorTranslator.FromHtml(default_font_color);
        }

        private void textBox_resolution_TextChanged(object sender, EventArgs e)
        {
            if (!Regex.Match(textBox_resolution.Text, @"^\d+:-?\d+$").Success)
            {
                textBox_resolution.Text = default_resolution;
                MessageBox.Show("输入格式有误！", "温馨提示", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

    }
}
